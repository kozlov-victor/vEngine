this.blendModes[CONST.BLEND_MODES.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.ADD] = [gl.ONE, gl.DST_ALPHA];
this.blendModes[CONST.BLEND_MODES.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.SCREEN] = [gl.ONE, gl.ONE_MINUS_SRC_COLOR];
this.blendModes[CONST.BLEND_MODES.OVERLAY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.DARKEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.LIGHTEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.COLOR_DODGE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.COLOR_BURN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.HARD_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.SOFT_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.DIFFERENCE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.EXCLUSION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.HUE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.SATURATION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.COLOR] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
this.blendModes[CONST.BLEND_MODES.LUMINOSITY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];



 cr.setGLBlend = function(this_, effect, gl) {
        if (!gl)
            return;
        this_.srcBlend = gl.ONE;
        this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
        switch (effect) {
            case 1: // lighter (additive)
                this_.srcBlend = gl.ONE;
                this_.destBlend = gl.ONE;
                break;
            case 2: // xor
                break; // todo
            case 3: // copy
                this_.srcBlend = gl.ONE;
                this_.destBlend = gl.ZERO;
                break;
            case 4: // destination-over
                this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
                this_.destBlend = gl.ONE;
                break;
            case 5: // source-in
                this_.srcBlend = gl.DST_ALPHA;
                this_.destBlend = gl.ZERO;
                break;
            case 6: // destination-in
                this_.srcBlend = gl.ZERO;
                this_.destBlend = gl.SRC_ALPHA;
                break;
            case 7: // source-out
                this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
                this_.destBlend = gl.ZERO;
                break;
            case 8: // destination-out
                this_.srcBlend = gl.ZERO;
                this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
                break;
            case 9: // source-atop
                this_.srcBlend = gl.DST_ALPHA;
                this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
                break;
            case 10: // destination-atop
                this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
                this_.destBlend = gl.SRC_ALPHA;
                break;
        }
    };

this.isWindows10 = !!window["cr_windows10"];

Runtime.prototype.tryLockOrientation = function() {
        if (!this.autoLockOrientation || this.orientations === 0)
            return;
        var orientation = "portrait";
        if (this.orientations === 2)
            orientation = "landscape";
        try {
            if (screen["orientation"] && screen["orientation"]["lock"])
                screen["orientation"]["lock"](orientation);
            else if (screen["lockOrientation"])
                screen["lockOrientation"](orientation);
            else if (screen["webkitLockOrientation"])
                screen["webkitLockOrientation"](orientation);
            else if (screen["mozLockOrientation"])
                screen["mozLockOrientation"](orientation);
            else if (screen["msLockOrientation"])
                screen["msLockOrientation"](orientation);
        } catch (e) {
            if (console && console.warn)
                console.warn("Failed to lock orientation: ", e);
        }
    };



Add the following code to compute the color for each pixel:
void main(void) {
 // texel color look up based on interpolated UV value in vTexCoord
 vec4 c = texture2D(uSampler, vec2(vTexCoord.s, vTexCoord.t));
 
 // tint the textured area. Leave transparent area as defined by the texture
 vec3 r = vec3(c) * (1.0-uPixelColor.a) + vec3(uPixelColor) * uPixelColor.a;
 vec4 result = vec4(r, c.a);
 gl_FragColor = result;
 
 
 
 on to activate a WebGL texture for drawing.
var activateTexture = function (textureName) {
 var gl = gEngine.Core.getGL();
 var texInfo = gEngine.ResourceMap.retrieveAsset(textureName);
 // Binds our texture reference to the current webGL texture functionality
 gl.bindTexture(gl.TEXTURE_2D, texInfo.mGLTexID);
 
 // To prevent texture wrappings
 gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
 gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
 // Handles how magnification and minimization filters will work.
 gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
 gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, 
 gl.LINEAR_MIPMAP_LINEAR);
 // For pixel-graphics where you want the texture to look "sharp" 
// do the following:
 // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
 // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
 };
a. The retrieveAsse




 var webpack = require('webpack');
 var path = require('path');
 var fs = require('fs');

 var nodeModules = {};
 fs.readdirSync('node_modules')
   .filter(function(x) {
     return ['.bin'].indexOf(x) === -1;
   })
   .forEach(function(mod) {
     nodeModules[mod] = 'commonjs ' + mod;
   });

 module.exports = {
   entry: './src/main.js',
   target: 'node',
   output: {
     path: path.join(__dirname, 'build'),
     filename: 'backend.js'
   },
   externals: nodeModules
 }


// thanks Felipe http://www.html5gamedevs.com/topic/1828-how-to-calculate-fps-in-plain-javascript/
var fps = {
	startTime : 0,
	frameNumber : 0,
	getFPS : function(){
		this.frameNumber++;
		var d = new Date().getTime(),
		currentTime = ( d - this.startTime ) / 1000,
		result = Math.floor( ( this.frameNumber / currentTime ) );
		if( currentTime > 1 ) {
			this.startTime = new Date().getTime();
			this.frameNumber = 0;
		}
		return result;
	}
};



declare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;

declare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;

declare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;

declare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;




gl.blendFunc(gl.ONE, gl.ONE); // for additive blending




